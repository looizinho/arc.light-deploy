{"version":3,"sources":["meteor://ðŸ’»app/packages/force-ssl-common/force_ssl_common.js"],"names":["module","export","isLocalConnection","isSslConnection","forwarded","link","default","v","__reifyWaitForDeps__","req","localhostRegexp","request","Object","create","connection","assign","remoteAddress","socket","forwardedParams","isLocal","keys","for","forEach","forKey","test","pair","proto","indexOf","__reify_async_result__","_reifyError","self","async"],"mappings":";;;;;;;;;;;;;;;;;;;;IAAAA,MAAM,CAACC,MAAM,CAAC;MAACC,iBAAiB,EAACA,CAAA,KAAIA,iBAAiB;MAACC,eAAe,EAACA,CAAA,KAAIA;IAAe,CAAC,CAAC;IAAC,IAAIC,SAAS;IAACJ,MAAM,CAACK,IAAI,CAAC,gBAAgB,EAAC;MAACC,OAAOA,CAACC,CAAC,EAAC;QAACH,SAAS,GAACG,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIC,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IAEjO;IACA;IACA;IACA,MAAMN,iBAAiB,GAAIO,GAAG,IAAK;MACjC,MAAMC,eAAe,GAAG,oCAAoC;MAC5D,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACJ,GAAG,CAAC;MAClCE,OAAO,CAACG,UAAU,GAAGF,MAAM,CAACG,MAAM,CAChC,CAAC,CAAC,EACFN,GAAG,CAACK,UAAU,EACd;QAAEE,aAAa,EAAEP,GAAG,CAACK,UAAU,CAACE,aAAa,IAAIP,GAAG,CAACQ,MAAM,CAACD;MAAc,CAC5E,CAAC;MACD,MAAME,eAAe,GAAGd,SAAS,CAACO,OAAO,CAAC;MAC1C,IAAIQ,OAAO,GAAG,IAAI;MAClBP,MAAM,CAACQ,IAAI,CAACF,eAAe,CAACG,GAAG,CAAC,CAACC,OAAO,CAAEC,MAAM,IAAK;QACnD,IAAI,CAACb,eAAe,CAACc,IAAI,CAACD,MAAM,CAAC,EAAE;UACjCJ,OAAO,GAAG,KAAK;QACjB;MACF,CAAC,CAAC;MACF,OAAOA,OAAO;IAChB,CAAC;;IAED;IACA;IACA,MAAMhB,eAAe,GAAIM,GAAG,IAAK;MAC/B,MAAMS,eAAe,GAAGd,SAAS,CAACK,GAAG,CAAC;MACtC,OAAOA,GAAG,CAACK,UAAU,CAACW,IAAI,IACnBP,eAAe,CAACQ,KAAK,IAAIR,eAAe,CAACQ,KAAK,CAACC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/E,CAAC;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA,G","file":"/packages/force-ssl-common.js","sourcesContent":["import forwarded from 'forwarded-http';\n\n// Determine if the connection is only over localhost. Both we\n// received it on localhost, and all proxies involved received on\n// localhost (supports \"forwarded\" and \"x-forwarded-for\").\nconst isLocalConnection = (req) => {\n  const localhostRegexp = /^\\s*(.*127\\.0\\.0\\.1|\\[?::1\\]?)\\s*$/;\n  const request = Object.create(req);\n  request.connection = Object.assign(\n    {},\n    req.connection,\n    { remoteAddress: req.connection.remoteAddress || req.socket.remoteAddress }\n  );\n  const forwardedParams = forwarded(request);\n  let isLocal = true;\n  Object.keys(forwardedParams.for).forEach((forKey) => {\n    if (!localhostRegexp.test(forKey)) {\n      isLocal = false;\n    }\n  });\n  return isLocal;\n};\n\n// Determine if the connection was over SSL at any point. Either we\n// received it as SSL, or a proxy did and translated it for us.\nconst isSslConnection = (req) => {\n  const forwardedParams = forwarded(req);\n  return req.connection.pair\n      || forwardedParams.proto && forwardedParams.proto.indexOf('https') !== -1;\n};\n\nexport { isLocalConnection, isSslConnection };\n"]}