{"version":3,"sources":["meteor://ðŸ’»app/packages/force-ssl/force_ssl_server.js"],"names":["isLocalConnection","isSslConnection","module","link","v","__reifyWaitForDeps__","url","Npm","require","httpServer","WebApp","oldHttpServerListeners","listeners","slice","removeAllListeners","addListener","req","res","host","parse","Meteor","absoluteUrl","hostname","replace","writeHead","end","args","arguments","forEach","oldListener","apply","__reify_async_result__","_reifyError","self","async"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAAA,IAAIA,iBAAiB,EAACC,eAAe;IAACC,MAAM,CAACC,IAAI,CAAC,yBAAyB,EAAC;MAACH,iBAAiBA,CAACI,CAAC,EAAC;QAACJ,iBAAiB,GAACI,CAAC;MAAA,CAAC;MAACH,eAAeA,CAACG,CAAC,EAAC;QAACH,eAAe,GAACG,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIC,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IAA7N,IAAIC,GAAG,GAAGC,GAAG,CAACC,OAAO,CAAC,KAAK,CAAC;IAG5B;IACA;IACA;IACA;IACA;;IAEA,IAAIC,UAAU,GAAGC,MAAM,CAACD,UAAU;IAClC,IAAIE,sBAAsB,GAAGF,UAAU,CAACG,SAAS,CAAC,SAAS,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IACrEJ,UAAU,CAACK,kBAAkB,CAAC,SAAS,CAAC;IACxCL,UAAU,CAACM,WAAW,CAAC,SAAS,EAAE,UAAUC,GAAG,EAAEC,GAAG,EAAE;MAEpD;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA,IAAI,CAACjB,iBAAiB,CAACgB,GAAG,CAAC,IAAI,CAACf,eAAe,CAACe,GAAG,CAAC,EAAE;QACpD;;QAEA,IAAIE,IAAI,GAAGZ,GAAG,CAACa,KAAK,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ;;QAEnD;QACA;QACAJ,IAAI,GAAGA,IAAI,CAACK,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;QAEhCN,GAAG,CAACO,SAAS,CAAC,GAAG,EAAE;UACjB,UAAU,EAAE,UAAU,GAAGN,IAAI,GAAGF,GAAG,CAACV,GAAG;UACvC,6BAA6B,EAAE;QACjC,CAAC,CAAC;QACFW,GAAG,CAACQ,GAAG,CAAC,CAAC;QACT;MACF;;MAEA;MACA,IAAIC,IAAI,GAAGC,SAAS;MACpBhB,sBAAsB,CAACiB,OAAO,CAAEC,WAAW,IAAK;QAC9CA,WAAW,CAACC,KAAK,CAACrB,UAAU,EAAEiB,IAAI,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;;IAGF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAAK,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA,G","file":"/packages/force-ssl.js","sourcesContent":["var url = Npm.require(\"url\");\nimport { isLocalConnection, isSslConnection } from 'meteor/force-ssl-common';\n\n// Unfortunately we can't use a connect middleware here since\n// sockjs installs itself prior to all existing listeners\n// (meaning prior to any connect middlewares) so we need to take\n// an approach similar to overshadowListeners in\n// https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n\nvar httpServer = WebApp.httpServer;\nvar oldHttpServerListeners = httpServer.listeners('request').slice(0);\nhttpServer.removeAllListeners('request');\nhttpServer.addListener('request', function (req, res) {\n\n  // allow connections if they have been handled w/ ssl already\n  // (either by us or by a proxy) OR the connection is entirely over\n  // localhost (development mode).\n  //\n  // Note: someone could trick us into serving over non-ssl by setting\n  // x-forwarded-for, x-forwarded-proto, forwarded, etc. Not much we can do\n  // there if we still want to operate behind proxies.\n\n  if (!isLocalConnection(req) && !isSslConnection(req)) {\n    // connection is not cool. send a 302 redirect!\n\n    var host = url.parse(Meteor.absoluteUrl()).hostname;\n\n    // strip off the port number. If we went to a URL with a custom\n    // port, we don't know what the custom SSL port is anyway.\n    host = host.replace(/:\\d+$/, '');\n\n    res.writeHead(302, {\n      'Location': 'https://' + host + req.url,\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end();\n    return;\n  }\n\n  // connection is OK. Proceed normally.\n  var args = arguments;\n  oldHttpServerListeners.forEach((oldListener) => {\n    oldListener.apply(httpServer, args);\n  });\n});\n\n\n// NOTE: this doesn't handle websockets!\n//\n// Websockets come in via the 'upgrade' request. We can override this,\n// however the problem is we're not sure if the websocket is actually\n// encrypted. We don't get x-forwarded-for, x-forwarded-proto, forwarded, etc.\n// on websockets. It's possible the 'sec-websocket-origin' header does\n// what we want, but that's not clear.\n//\n// For now, this package allows raw unencrypted DDP connections over\n// websockets.\n"]}